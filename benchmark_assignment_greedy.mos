model ModelName
uses "mmxprs","mmrobust","r","mmsystem"; !gain access to the Xpress-Optimizer solver

!optional parameters section
parameters
	DIR= "C:/Adatok/SZTAKI/IJAMT/Experiments/"
	Mode = 1 ! 1: Kumulatív WCont alapján 2: Termékenként WC száazlék alapján
	Limits = 1 	! 1: 30-70 2: 30-60 3: 20-70 4: 20-60 5: 40-70 6: 40-60
				! 1 ! 1: 2: 3: 4: 5: 6: 
	HorizonLength = 10
	RecSpaceReq = 12
	FlxSpaceReq = 18
	DedSpaceReq = 22
	TotalAvailableSpace = 11600
	PriceMultiDed = 0.8 
	PriceMultiRec = 0.4 
	PriceMultiFlx = 1 
	DepreciationRate = 0.08
	CostOfChange = 100
	MaxOperatorsPerPeriod = 6600
	W_vol = 0.003 
	W_sale = 0.5
	W_change = 1.4
	W_inv = 10
	W_clt = 0.05
	CurrentPeriod = 0
end-parameters

declarations
	Nominal: real
	Robust:  real
	
	!Scenario = 1..10
	M = {"WS1","WS2","WS3","WS4","WS5","WS6","WS7","WS8"} !set of modules
	S = {"Rec", "Ded", "Flx"}
	T = 0..10 !set of horizons (strategic)
	C = {"C1","C2","C3","C4","C5","C6","C7","C8","C9"}
	AllPeriods = 0..10
	
	P : set of string !set of products
	
	Volume : array(P,T) of integer !uncertain
	Forecast : array(P,T) of integer
	DemandUncertainty : array(P,T) of real
	
	testList : list of real
	
	
	Assignment : array(P,AllPeriods,S) of boolean
	CHG : array(P,T,S) of mpvar
	WorkContent : array(P) of integer
	WorkContentSorted : array(P) of string
	CumulWorkContent : array(P) of integer
	WorkContIndex : list of string
		
	ModulePrices : array(M) of integer
	
	VolumeTrend : array(P) of integer !trend of production cvolume over time: 1 (very decrease) - 5 (very increase)
	SetupTime : array(P) of real
	ProcTime : array(P) of real
	ReconfigTime : array(P) of real
	RegressionVolume : array(P) of integer
	Cluster : array(P) of integer
	SumModule : array (P) of integer
	ModuleReq : array (P,M) of integer
	
	LL : real
	UL : real
	
	WS1: array(P) of integer
	WS2: array(P) of integer
	WS3: array(P) of integer
	WS4: array(P) of integer
	WS5: array(P) of integer
	WS6: array(P) of integer
	WS7: array(P) of integer
	WS8: array(P) of integer
	
	VOL0 : array(P) of integer
	VOL1 : array(P) of integer
	VOL2 : array(P) of integer
	VOL3 : array(P) of integer
	VOL4 : array(P) of integer
	VOL5 : array(P) of integer
	VOL6 : array(P) of integer
	VOL7 : array(P) of integer
	VOL8 : array(P) of integer
	VOL9 : array(P) of integer
	VOL10: array(P) of integer
	
	InitAssignment : array(P) of string
	InitResourcePool: array(S,M) of integer
	DefaultAssignment : array(P) of string
	
	ResourcePool : array(M,S,T) of linctr
		
	DED : array(P,T) of integer
	REC : array(P,T) of integer
  	FLX : array(P,T) of integer

end-declarations

initializations from "mmsheet.xls:" + DIR + "modular_data.xls"
		[WS1,WS2,WS3,WS4,WS5,WS6,WS7,WS8,SetupTime,ProcTime,ReconfigTime,RegressionVolume,VolumeTrend] as "[Products$A2:N68]"
end-initializations
initializations from "mmsheet.xls:" + DIR + "benchmarkInput.xls"
		[VOL0,VOL1,VOL2,VOL3,VOL4,VOL5,VOL6,VOL7,VOL8,VOL9,VOL10] as "[Greedy$A2:L68]"
end-initializations

if (CurrentPeriod <> 0) then
	initializations from DIR + "InitAssignment_" + CurrentPeriod + ".dat"
			InitAssignment
	end-initializations
end-if

forall(m in M, p in P) do
	ModuleReq(p, "WS1") := WS1(p)
	ModuleReq(p, "WS2") := WS2(p)
	ModuleReq(p, "WS3") := WS3(p)
	ModuleReq(p, "WS4") := WS4(p)
	ModuleReq(p, "WS5") := WS5(p)
	ModuleReq(p, "WS6") := WS6(p)
	ModuleReq(p, "WS7") := WS7(p)
	ModuleReq(p, "WS8") := WS8(p)
end-do

forall(p in P) do
	Forecast(p,0) := VOL0(p)
	Forecast(p,1) := VOL1(p)
	Forecast(p,2) := VOL2(p)
	Forecast(p,3) := VOL3(p)
	Forecast(p,4) := VOL4(p)
	Forecast(p,5) := VOL5(p)
	Forecast(p,6) := VOL6(p)
	Forecast(p,7) := VOL7(p)
	Forecast(p,8) := VOL8(p)
	Forecast(p,9) := VOL9(p)
	Forecast(p,10):= VOL10(p)
end-do

forall(p in P, t in T)Volume(p,t) := Forecast(p,t)


if Mode = 1 then
	case Limits of
	  1 : do 
	  	LL := 0.3
	  	UL := 0.7
	  end-do
	  2 : do 
	  	LL := 0.3
	  	UL := 0.6
	  end-do
	  3 : do 
	  	LL := 0.2
	  	UL := 0.7
	  end-do
	  4 : do 
	  	LL := 0.2
	  	UL := 0.6
	  end-do
	  5 : do 
	  	LL := 0.4
	  	UL := 0.7
	  end-do
	  6 : do 
	  	LL := 0.4
	  	UL := 0.6
	  end-do
	end-case 
	
	forall(t in T) do
		forall(p in P)WorkContent(p) := ceil(Volume(p,t) * ProcTime(p))
		
		qsort(true,WorkContent,WorkContentSorted)
		
		CumulWorkContent("P1") := WorkContent(WorkContentSorted("P1"))
		forall(p in 2..getsize(P))CumulWorkContent("P" + p) := WorkContent(WorkContentSorted("P" + p)) + CumulWorkContent("P" + (p-1))
		
		LowLimit := sum(p in P)WorkContent(p) * LL
		HighLimit := sum(p in P)WorkContent(p) * UL
	
		forall(p in P, s in S) do
			if CumulWorkContent(p) <= LowLimit then
				Assignment(WorkContentSorted(p),t,"Rec") := true
				REC(p,t) := 1
			elif CumulWorkContent(p) > LowLimit and CumulWorkContent(p) <= HighLimit then
				Assignment(WorkContentSorted(p),t,"Flx") := true
				FLX(p,t) := 1
			else
				Assignment(WorkContentSorted(p),t,"Ded") := true
				DED(p,t) := 1
			end-if
		end-do
	end-do
else ! egyszeru szazalek alapu hozzarendeles
	forall(t in T) do
		forall(p in P)WorkContent(p) := ceil(Volume(p,t) * ProcTime(p))
		
		TotalWorkCont := sum(p in P)WorkContent(p)
		
		forall(p in P)WorkContperc(p) := WorkContent(p) / TotalWorkCont
		
		case Limits of
		  1 : do 
		  	LL := 0.01
		  	UL := 0.02
		  end-do
		  2 : do 
		  	LL := 0.01
		  	UL := 0.03
		  end-do
		  3 : do 
		  	LL := 0.02
		  	UL := 0.03
		  end-do
		  4 : do 
		  	LL := 0.01
		  	UL := 0.04
		  end-do
		  5 : do 
		  	LL := 0.02
		  	UL := 0.05
		  end-do
		  6 : do 
		  	LL := 0.03
		  	UL := 0.04
		  end-do
		end-case 
		
		forall(p in P, s in S) do
			if WorkContperc(p) <= LL then
				Assignment(p,t,"Rec") := true
				REC(p,t) := 1
			elif WorkContperc(p) > LL and WorkContperc(p) <= UL then
				Assignment(p,t,"Flx") := true
				FLX(p,t) := 1
			else
				Assignment(p,t,"Ded") := true
				DED(p,t) := 1
			end-if
		end-do
	end-do
end-if

initializations to DIR + "AssignmentGreedy_" + Mode + Limits + ".dat"
		Assignment as "Assignment"
end-initializations

forall(t in T) do
		write(sum(p in P)DED(p,t).sol,"	",sum(p in P)FLX(p,t).sol,"	",sum(p in P)REC(p,t).sol)
		write("\n")
end-do


if Mode = 1 and Limits = 1 then
	forall(p in P) do
		RandSystem := (round(random * (3 - 1)) + 1) !67
		case RandSystem of
		  1 : DefaultAssignment(p) := "Ded"
		  2 : DefaultAssignment(p) := "Rec"
		  3 : DefaultAssignment(p) := "Flx"
		end-case
	end-do
	
	(!
	forall(p in P, s in S | Assignment(p,0,s)) do
		DefaultAssignment(p) := s ! s
	end-do
	!)
	initializations to DIR + "InitAssignment.dat"
		DefaultAssignment as "InitAssignment"
	end-initializations
	
	initializations to DIR + "InitAssignment_0.dat"
		DefaultAssignment as "InitAssignment"
	end-initializations
end-if

end-model